-- ============================================================
-- Migration: Create LowCarbPlaner Database Schema
-- Description: Complete database schema for LowCarbPlaner MVP
-- Tables Affected:
--   - Schema: content (ingredients, ingredient_unit_conversions, recipes, recipe_ingredients)
--   - Schema: public (profiles, planned_meals, feedback)
-- Special Notes:
--   - RLS enabled on all tables with granular policies
--   - Triggers for automatic profile creation, updated_at columns, and denormalized nutrition values
--   - Two-schema architecture: 'content' for master data, 'public' for user-specific data
-- ============================================================

-- ============================================================
-- 1. Create content schema for master data
-- ============================================================
-- The 'content' schema will hold all master data (recipes, ingredients)
-- managed by administrators and read by authenticated users.
create schema if not exists content;

-- ============================================================
-- 2. Create custom ENUM types
-- ============================================================
-- These enums provide type safety and ensure data consistency
-- across the application.

-- Gender enum for user profiles
create type gender_enum as enum ('male', 'female');

-- Activity level enum aligned with BMR calculator requirements
create type activity_level_enum as enum ('very_low', 'low', 'moderate', 'high', 'very_high');

-- Goal enum for user's dietary objective
create type goal_enum as enum ('weight_loss', 'weight_maintenance');

-- Meal type enum for daily meal planning (breakfast, lunch, dinner)
create type meal_type_enum as enum ('breakfast', 'lunch', 'dinner');

-- Ingredient category enum for type-safe ingredient categorization
create type ingredient_category_enum as enum (
  'vegetables',      -- warzywa
  'fruits',          -- owoce
  'meat',            -- mięso
  'fish',            -- ryby i owoce morza
  'dairy',           -- nabiał
  'eggs',            -- jaja
  'nuts_seeds',      -- orzechy i nasiona
  'oils_fats',       -- oleje i tłuszcze
  'spices_herbs',    -- przyprawy i zioła
  'flours',          -- mąki (niskowęglowodanowe: migdałowa, kokosowa)
  'beverages',       -- napoje
  'sweeteners',      -- słodziki
  'condiments',      -- sosy i dodatki
  'other'            -- inne
);

-- ============================================================
-- 3. Create helper function for updated_at trigger
-- ============================================================
-- This function will be used by triggers to automatically update
-- the 'updated_at' timestamp column when a row is modified.
create or replace function update_updated_at_column()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

comment on function update_updated_at_column() is 'Trigger function to automatically update updated_at timestamp on row modification.';

-- ============================================================
-- 4. Create helper function for automatic profile creation
-- ============================================================
-- This trigger function automatically creates a profile entry in public.profiles
-- when a new user is created in auth.users. This ensures referential integrity
-- and simplifies onboarding workflow.
create or replace function handle_new_user()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  insert into public.profiles (id, email, gender, age, weight_kg, height_cm, activity_level, goal, target_calories, target_carbs_g, target_protein_g, target_fats_g)
  values (
    new.id,
    new.email,
    'male', -- default placeholder, will be updated during onboarding
    30,     -- default placeholder
    70.0,   -- default placeholder
    170,    -- default placeholder
    'moderate', -- default placeholder
    'weight_maintenance', -- default placeholder
    2000,   -- default placeholder
    75,     -- default placeholder
    150,    -- default placeholder
    89      -- default placeholder
  );
  return new;
end;
$$;

comment on function handle_new_user() is 'Trigger function to automatically create a profile entry when a new user registers in auth.users.';

-- ============================================================
-- 5. Create public.ingredients table
-- ============================================================
-- Master data table storing all available ingredients with their
-- nutritional values per 100 units (grams or ml).
create table public.ingredients (
  id bigint generated by default as identity primary key,
  name text not null unique,
  category ingredient_category_enum not null, -- Type-safe ingredient category (ENUM)
  image_url text, -- URL to ingredient image in Supabase Storage (optional)
  unit text not null default 'g', -- Default unit for nutritional values (g, ml)
  calories_per_100_units numeric(8, 2) not null check (calories_per_100_units >= 0),
  carbs_per_100_units numeric(8, 2) not null check (carbs_per_100_units >= 0),
  protein_per_100_units numeric(8, 2) not null check (protein_per_100_units >= 0),
  fats_per_100_units numeric(8, 2) not null check (fats_per_100_units >= 0),
  is_divisible boolean not null default true, -- Determines if ingredient can be used in fractional amounts (e.g., flour, oil)
  created_at timestamptz not null default now()
);

comment on table public.ingredients is 'Master data for all available ingredients with nutritional values per 100 units.';
comment on column public.ingredients.category is 'Type-safe ingredient category (ENUM): vegetables, fruits, meat, fish, dairy, eggs, nuts_seeds, oils_fats, spices_herbs, flours, beverages, sweeteners, condiments, other.';
comment on column public.ingredients.image_url is 'Optional URL to ingredient image stored in Supabase Storage.';
comment on column public.ingredients.is_divisible is 'Indicates if ingredient is divisible (e.g., flour) vs. indivisible (e.g., egg).';

-- ============================================================
-- 6. Create public.ingredient_unit_conversions table
-- ============================================================
-- Helper table for converting custom units (e.g., "1 egg", "1 slice")
-- to grams for accurate nutritional calculations.
create table public.ingredient_unit_conversions (
  id bigint generated by default as identity primary key,
  ingredient_id bigint not null references public.ingredients on delete cascade,
  unit_name text not null, -- e.g., 'sztuka', 'plaster', 'łyżka'
  grams_equivalent numeric(8, 2) not null check (grams_equivalent > 0),

  constraint ingredient_unit_conversions_unique unique (ingredient_id, unit_name)
);

comment on table public.ingredient_unit_conversions is 'Conversion table mapping custom units to grams for precise calculations.';
comment on column public.ingredient_unit_conversions.unit_name is 'Custom unit name (e.g., sztuka, plaster, łyżka).';
comment on column public.ingredient_unit_conversions.grams_equivalent is 'Equivalent weight in grams for the custom unit.';

-- ============================================================
-- 7. Create public.recipes table
-- ============================================================
-- Master data table storing all available recipes with denormalized
-- total nutritional values for performance optimization (US-013).
create table public.recipes (
  id bigint generated by default as identity primary key,
  name text not null unique,
  image_url text, -- Optional URL to recipe image in Supabase Storage
  instructions jsonb not null, -- Array of steps: [{"step": 1, "description": "...", "imageUrl": "..."}, ...]
  meal_types meal_type_enum[] not null, -- Meal types this recipe is suitable for (breakfast, lunch, dinner)
  tags text[], -- Tags for filtering and categorization (e.g., 'kurczak', 'szybkie', 'patelnia')

  -- Denormalized total nutritional values calculated from recipe_ingredients (US-013)
  -- These values are automatically updated by triggers for fast sorting and display
  total_calories integer check (total_calories >= 0), -- Automatically calculated by trigger
  total_protein_g numeric(8, 2) check (total_protein_g >= 0), -- Automatically calculated by trigger
  total_carbs_g numeric(8, 2) check (total_carbs_g >= 0), -- Automatically calculated by trigger
  total_fats_g numeric(8, 2) check (total_fats_g >= 0), -- Automatically calculated by trigger

  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

comment on table public.recipes is 'Master data for all available recipes with denormalized nutritional totals.';
comment on column public.recipes.instructions is 'Recipe preparation steps in JSONB format: [{"step": 1, "description": "...", "imageUrl": "..."}].';
comment on column public.recipes.meal_types is 'Array of meal types this recipe is suitable for (breakfast, lunch, dinner).';
comment on column public.recipes.tags is 'Tags for filtering and categorization (e.g., kurczak, szybkie, patelnia).';
comment on column public.recipes.total_calories is 'Denormalized total calories calculated from base ingredients, updated automatically by trigger (US-013).';
comment on column public.recipes.total_protein_g is 'Denormalized total protein calculated from base ingredients, updated automatically by trigger (US-013).';
comment on column public.recipes.total_carbs_g is 'Denormalized total carbs calculated from base ingredients, updated automatically by trigger (US-013).';
comment on column public.recipes.total_fats_g is 'Denormalized total fats calculated from base ingredients, updated automatically by trigger (US-013).';

-- Trigger to automatically update updated_at column
create trigger recipes_updated_at
  before update on public.recipes
  for each row
  execute function update_updated_at_column();

-- ============================================================
-- 8. Create public.recipe_ingredients table
-- ============================================================
-- Many-to-many relationship table linking recipes to ingredients
-- with denormalized nutritional values for each ingredient amount (US-013).
create table public.recipe_ingredients (
  recipe_id bigint not null references public.recipes on delete cascade,
  ingredient_id bigint not null references public.ingredients on delete cascade,
  base_amount numeric(8, 2) not null check (base_amount > 0), -- Amount of ingredient in base unit (g, ml, etc.)
  unit text not null default 'g', -- Unit for base_amount
  is_scalable boolean not null default false, -- Whether the algorithm can scale this ingredient amount
  step_number smallint, -- Optional step number where this ingredient is used

  -- Denormalized nutritional values for this specific ingredient amount (US-013)
  -- These values are automatically calculated and updated by triggers
  calories numeric(8, 2) check (calories >= 0), -- Calculated: base_amount * calories_per_100_units / 100
  protein_g numeric(8, 2) check (protein_g >= 0), -- Calculated: base_amount * protein_per_100_units / 100
  carbs_g numeric(8, 2) check (carbs_g >= 0), -- Calculated: base_amount * carbs_per_100_units / 100
  fats_g numeric(8, 2) check (fats_g >= 0), -- Calculated: base_amount * fats_per_100_units / 100

  primary key (recipe_id, ingredient_id)
);

comment on table public.recipe_ingredients is 'Many-to-many relationship linking recipes to ingredients with denormalized nutritional values.';
comment on column public.recipe_ingredients.base_amount is 'Base amount of ingredient in the specified unit.';
comment on column public.recipe_ingredients.is_scalable is 'Indicates if the meal generation algorithm can modify this ingredient amount.';
comment on column public.recipe_ingredients.step_number is 'Optional step number where this ingredient is used in the recipe.';
comment on column public.recipe_ingredients.calories is 'Denormalized calories for base_amount, calculated automatically by trigger (US-013).';
comment on column public.recipe_ingredients.protein_g is 'Denormalized protein for base_amount, calculated automatically by trigger (US-013).';
comment on column public.recipe_ingredients.carbs_g is 'Denormalized carbs for base_amount, calculated automatically by trigger (US-013).';
comment on column public.recipe_ingredients.fats_g is 'Denormalized fats for base_amount, calculated automatically by trigger (US-013).';

-- ============================================================
-- 9. Create trigger function to denormalize ingredient nutritional values
-- ============================================================
-- This trigger automatically calculates and stores nutritional values
-- for each ingredient based on base_amount (US-013 optimization).
create or replace function calculate_recipe_ingredient_nutrition()
returns trigger
language plpgsql
as $$
declare
  v_ingredient record;
begin
  -- Fetch the ingredient's nutritional values per 100 units
  select
    calories_per_100_units,
    protein_per_100_units,
    carbs_per_100_units,
    fats_per_100_units
  into v_ingredient
  from public.ingredients
  where id = new.ingredient_id;

  -- Calculate denormalized values based on base_amount
  -- Formula: base_amount * (value_per_100_units / 100)
  new.calories := round((new.base_amount * v_ingredient.calories_per_100_units / 100)::numeric, 2);
  new.protein_g := round((new.base_amount * v_ingredient.protein_per_100_units / 100)::numeric, 2);
  new.carbs_g := round((new.base_amount * v_ingredient.carbs_per_100_units / 100)::numeric, 2);
  new.fats_g := round((new.base_amount * v_ingredient.fats_per_100_units / 100)::numeric, 2);

  return new;
end;
$$;

comment on function calculate_recipe_ingredient_nutrition() is 'Trigger function to automatically calculate and store denormalized nutritional values for recipe ingredients (US-013).';

-- Attach trigger to recipe_ingredients table
create trigger recipe_ingredients_nutrition_trigger
  before insert or update on public.recipe_ingredients
  for each row
  execute function calculate_recipe_ingredient_nutrition();

-- ============================================================
-- 10. Create trigger function to denormalize recipe total nutritional values
-- ============================================================
-- This trigger automatically recalculates and updates total nutritional
-- values in the recipes table whenever ingredients are modified (US-013).
create or replace function update_recipe_total_nutrition()
returns trigger
language plpgsql
as $$
declare
  v_recipe_id bigint;
begin
  -- Determine which recipe to update
  if tg_op = 'DELETE' then
    v_recipe_id := old.recipe_id;
  else
    v_recipe_id := new.recipe_id;
  end if;

  -- Recalculate and update total nutritional values by summing all ingredients
  update public.recipes
  set
    total_calories = (
      select coalesce(sum(calories), 0)::integer
      from public.recipe_ingredients
      where recipe_id = v_recipe_id
    ),
    total_protein_g = (
      select coalesce(sum(protein_g), 0)
      from public.recipe_ingredients
      where recipe_id = v_recipe_id
    ),
    total_carbs_g = (
      select coalesce(sum(carbs_g), 0)
      from public.recipe_ingredients
      where recipe_id = v_recipe_id
    ),
    total_fats_g = (
      select coalesce(sum(fats_g), 0)
      from public.recipe_ingredients
      where recipe_id = v_recipe_id
    )
  where id = v_recipe_id;

  return null; -- Result is ignored for AFTER triggers
end;
$$;

comment on function update_recipe_total_nutrition() is 'Trigger function to automatically recalculate total recipe nutritional values when ingredients are modified (US-013).';

-- Attach trigger to recipe_ingredients table (AFTER to ensure ingredient values are already calculated)
create trigger recipe_total_nutrition_trigger
  after insert or update or delete on public.recipe_ingredients
  for each row
  execute function update_recipe_total_nutrition();

-- ============================================================
-- 11. Create public.profiles table
-- ============================================================
-- User profile table storing personal data, calculated nutritional goals,
-- and onboarding status. One-to-one relationship with auth.users.
create table public.profiles (
  id uuid primary key references auth.users on delete cascade,
  email text unique not null,
  gender gender_enum not null,
  age smallint not null check (age > 0 and age < 120),
  weight_kg numeric(5, 2) not null check (weight_kg > 0),
  height_cm smallint not null check (height_cm > 0),
  activity_level activity_level_enum not null,
  goal goal_enum not null,
  weight_loss_rate_kg_week numeric(3, 2) check (weight_loss_rate_kg_week > 0), -- NULL if goal is 'weight_maintenance'

  -- Calculated nutritional goals (calculated by application logic during onboarding)
  target_calories integer not null check (target_calories > 0),
  target_carbs_g integer not null check (target_carbs_g >= 0),
  target_protein_g integer not null check (target_protein_g >= 0),
  target_fats_g integer not null check (target_fats_g >= 0),

  -- Metadata
  disclaimer_accepted_at timestamptz, -- Timestamp when user accepted health disclaimer
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

comment on table public.profiles is 'User profiles with personal data, calculated nutritional goals, and onboarding status.';
comment on column public.profiles.id is 'Foreign key to auth.users.id, primary key for one-to-one relationship.';
comment on column public.profiles.weight_loss_rate_kg_week is 'Target weight loss rate in kg/week (e.g., 0.5). NULL if goal is weight_maintenance.';
comment on column public.profiles.target_calories is 'Daily calorie target calculated from BMR and TDEE during onboarding.';
comment on column public.profiles.target_carbs_g is 'Daily carbohydrate target in grams (15% of calories for low-carb diet).';
comment on column public.profiles.target_protein_g is 'Daily protein target in grams (35% of calories).';
comment on column public.profiles.target_fats_g is 'Daily fat target in grams (50% of calories).';
comment on column public.profiles.disclaimer_accepted_at is 'Timestamp when user accepted the health and safety disclaimer.';

-- Trigger to automatically update updated_at column
create trigger profiles_updated_at
  before update on public.profiles
  for each row
  execute function update_updated_at_column();

-- Trigger to automatically create profile when new user registers
create trigger on_auth_user_created
  after insert on auth.users
  for each row
  execute function handle_new_user();

-- ============================================================
-- 12. Create public.planned_meals table
-- ============================================================
-- Transactional table storing the user's generated meal plan.
-- Each row represents one meal (breakfast, lunch, or dinner) on a specific date.
create table public.planned_meals (
  id bigint generated by default as identity primary key,
  user_id uuid not null references public.profiles on delete cascade,
  recipe_id bigint references public.recipes on delete set null, -- SET NULL to preserve meal history if recipe is deleted
  meal_date date not null,
  meal_type meal_type_enum not null,
  is_eaten boolean not null default false, -- Tracks if user marked this meal as consumed
  ingredient_overrides jsonb, -- Stores user modifications to ingredient amounts: [{"ingredient_id": 12, "new_amount": 150}]
  created_at timestamptz not null default now(),

  -- Business constraint: one meal type per user per day
  constraint planned_meals_user_day_type_unique unique (user_id, meal_date, meal_type)
);

comment on table public.planned_meals is 'User meal plans for each day, tracking planned and consumed meals.';
comment on column public.planned_meals.recipe_id is 'Foreign key to public.recipes. Set to NULL if recipe is deleted to preserve meal history.';
comment on column public.planned_meals.is_eaten is 'Indicates if user marked this meal as consumed in the daily progress tracker.';
comment on column public.planned_meals.ingredient_overrides is 'User modifications to ingredient amounts: [{"ingredient_id": 12, "new_amount": 150}].';

-- ============================================================
-- 13. Create public.feedback table
-- ============================================================
-- Table for storing user feedback and issue reports.
create table public.feedback (
  id bigint generated by default as identity primary key,
  user_id uuid not null references public.profiles on delete cascade,
  content text not null,
  metadata jsonb, -- Additional contextual data: {"appVersion": "1.0.1", "os": "iOS"}
  created_at timestamptz not null default now()
);

comment on table public.feedback is 'User feedback and issue reports.';
comment on column public.feedback.metadata is 'Additional contextual data about the feedback: {"appVersion": "1.0.1", "os": "iOS"}.';

-- ============================================================
-- 14. Create indexes for query optimization
-- ============================================================
-- Index for fast lookup of planned meals by user and date range
-- This is the most common query pattern for dashboard and weekly view
create index idx_planned_meals_user_date on public.planned_meals (user_id, meal_date);

-- GIN index for efficient recipe filtering by tags
-- Enables fast searches like "find all recipes tagged with 'kurczak'"
create index idx_recipes_tags_gin on public.recipes using gin (tags);

-- GIN index for efficient recipe filtering by meal types
-- Enables fast searches like "find all recipes suitable for breakfast"
create index idx_recipes_meal_types_gin on public.recipes using gin (meal_types);

-- Note: PostgreSQL automatically creates indexes on primary keys and unique constraints
-- Foreign key columns (e.g., planned_meals.user_id, planned_meals.recipe_id) benefit from explicit indexes

-- ============================================================
-- 15. Enable Row Level Security (RLS) on all tables
-- ============================================================
-- RLS ensures users can only access their own data in the public schema
-- and enforces read-only access to content schema for authenticated users.

-- Enable RLS on public schema tables
alter table public.profiles enable row level security;
alter table public.planned_meals enable row level security;
alter table public.feedback enable row level security;

-- Enable RLS on content schema tables
alter table public.ingredients enable row level security;
alter table public.ingredient_unit_conversions enable row level security;
alter table public.recipes enable row level security;
alter table public.recipe_ingredients enable row level security;

-- ============================================================
-- 16. Create RLS policies for public.profiles
-- ============================================================
-- Users can only view, update, and manage their own profile.
-- Insert is handled automatically by the trigger on auth.users.

-- Policy: Users can view their own profile
create policy "profiles_select_own"
  on public.profiles
  for select
  to authenticated
  using (auth.uid() = id);

-- Policy: Users can update their own profile
create policy "profiles_update_own"
  on public.profiles
  for update
  to authenticated
  using (auth.uid() = id)
  with check (auth.uid() = id);

-- Policy: System can insert profiles (via trigger)
-- This policy allows the handle_new_user() trigger function to insert profiles
create policy "profiles_insert_system"
  on public.profiles
  for insert
  to authenticated
  with check (auth.uid() = id);

-- Policy: Users can delete their own profile (GDPR compliance)
create policy "profiles_delete_own"
  on public.profiles
  for delete
  to authenticated
  using (auth.uid() = id);

-- ============================================================
-- 17. Create RLS policies for public.planned_meals
-- ============================================================
-- Users can fully manage (select, insert, update, delete) their own planned meals.

-- Policy: Users can view their own planned meals
create policy "planned_meals_select_own"
  on public.planned_meals
  for select
  to authenticated
  using (auth.uid() = user_id);

-- Policy: Users can insert their own planned meals
create policy "planned_meals_insert_own"
  on public.planned_meals
  for insert
  to authenticated
  with check (auth.uid() = user_id);

-- Policy: Users can update their own planned meals
create policy "planned_meals_update_own"
  on public.planned_meals
  for update
  to authenticated
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- Policy: Users can delete their own planned meals
create policy "planned_meals_delete_own"
  on public.planned_meals
  for delete
  to authenticated
  using (auth.uid() = user_id);

-- ============================================================
-- 18. Create RLS policies for public.feedback
-- ============================================================
-- Users can view and create their own feedback entries.
-- Deletion is restricted to prevent data loss.

-- Policy: Users can view their own feedback
create policy "feedback_select_own"
  on public.feedback
  for select
  to authenticated
  using (auth.uid() = user_id);

-- Policy: Users can create their own feedback
create policy "feedback_insert_own"
  on public.feedback
  for insert
  to authenticated
  with check (auth.uid() = user_id);

-- Note: Update and delete are not allowed to preserve feedback integrity

-- ============================================================
-- 19. Create RLS policies for content schema (read-only for authenticated users)
-- ============================================================
-- All content tables are read-only for authenticated users.
-- Write access is controlled at the database role level (e.g., content_manager role).

-- Policy: Authenticated users can view all ingredients
create policy "ingredients_select_authenticated"
  on public.ingredients
  for select
  to authenticated
  using (true);

-- Policy: Anonymous users can view all ingredients (for public recipe browsing)
create policy "ingredients_select_anon"
  on public.ingredients
  for select
  to anon
  using (true);

-- Policy: Authenticated users can view all ingredient unit conversions
create policy "ingredient_unit_conversions_select_authenticated"
  on public.ingredient_unit_conversions
  for select
  to authenticated
  using (true);

-- Policy: Anonymous users can view all ingredient unit conversions
create policy "ingredient_unit_conversions_select_anon"
  on public.ingredient_unit_conversions
  for select
  to anon
  using (true);

-- Policy: Authenticated users can view all recipes
create policy "recipes_select_authenticated"
  on public.recipes
  for select
  to authenticated
  using (true);

-- Policy: Anonymous users can view all recipes (for public recipe browsing)
create policy "recipes_select_anon"
  on public.recipes
  for select
  to anon
  using (true);

-- Policy: Authenticated users can view all recipe ingredients
create policy "recipe_ingredients_select_authenticated"
  on public.recipe_ingredients
  for select
  to authenticated
  using (true);

-- Policy: Anonymous users can view all recipe ingredients
create policy "recipe_ingredients_select_anon"
  on public.recipe_ingredients
  for select
  to anon
  using (true);

-- ============================================================
-- Migration Complete
-- ============================================================
-- Summary:
-- ✅ Created content schema for master data
-- ✅ Created 4 custom ENUM types for type safety
-- ✅ Created 8 tables with proper constraints and relationships
-- ✅ Implemented automatic profile creation trigger
-- ✅ Implemented updated_at triggers for profiles and recipes
-- ✅ Implemented denormalization triggers for ingredient and recipe nutrition (US-013)
-- ✅ Created indexes for optimized queries
-- ✅ Enabled RLS on all tables
-- ✅ Created granular RLS policies for all roles and operations
-- ✅ Added comprehensive comments for documentation
--
-- Next steps:
-- 1. Seed public.ingredients table with base ingredient data
-- 2. Seed public.recipes table with base recipe data
-- 3. Test RLS policies with different user roles
-- 4. Implement data retention policy (e.g., pg_cron to delete old planned_meals)
-- ============================================================
